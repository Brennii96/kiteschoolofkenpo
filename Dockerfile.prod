# Stage 1: Build dependencies and Composer
FROM composer:latest AS build-stage

WORKDIR /app

# Copy only composer files for caching
COPY composer.json composer.lock ./

# Install project dependencies
RUN composer install --no-interaction --no-dev --optimize-autoloader

# Stage 2: Your application with FrankenPHP
FROM dunglas/frankenphp:latest

WORKDIR /var/www/html

# Copy application files
COPY . /var/www/html

# Copy vendor folder from build stage
COPY --from=build-stage /app/vendor /var/www/html/vendor

# Install system dependencies (including locales and libxpm-dev)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        libpng-dev \
        libjpeg62-turbo-dev \
        libfreetype6-dev \
        libxpm-dev \
        locales \
        zip \
        unzip \
        git \
    && docker-php-ext-configure gd \
        --with-freetype-dir=/usr/include/freetype2 \
        --with-jpeg-dir=/usr/include \
        --with-png-dir=/usr/include \
    && docker-php-ext-install -j$(($(nproc)-1)) gd pdo pdo_mysql \
    && rm -rf /var/lib/apt/lists/*  # Clean up apt cache

# Set locales
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en

# Set correct file permissions for Laravel
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html \
    && chmod -R 777 /var/www/html/storage \
    && chmod -R 777 /var/www/html/bootstrap/cache

# Generate application key (only if .env doesn't exist.  Important for production!)
RUN if [ ! -f .env ]; then cp .env.example .env; php artisan key:generate --force; fi

# Clear cache
RUN php artisan config:cache
RUN php artisan route:cache
RUN php artisan view:cache

# Expose port 80 for the FrankenPHP server
EXPOSE 80

# Configure FrankenPHP to serve your Laravel application
COPY frankenphp.conf /etc/frankenphp/conf.d/default.conf

# Start FrankenPHP
CMD ["frankenphp", "run"]
